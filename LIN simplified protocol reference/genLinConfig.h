/******************************************************************************
*                                                                             *
*                _  _               ___             _             			      *
*               (_)| |__   _ __    / _ \ _ __ ___  | |__    /\  /\			      *
*               | || '_ \ | '__|  / /_\/| '_ ` _ \ | '_ \  / /_/ /            *
*               | || | | || |    / /_\\ | | | | | || |_) |/ __  / 			      *
*               |_||_| |_||_|    \____/ |_| |_| |_||_.__/ \/ /_/  			      *
*                                                                             *
*  ihr GmbH                                                                   *
*  Airport Boulevard B210                                                     *
*  77836 Rheinm√ºnster - Germany                                               *
*  http://www.ihr.de                                                          *
*  Phone +49(0) 7229-18475-0                                                  *
*  Fax   +49(0) 7229-18475-11                                                 *
*                                                                             *
*******************************************************************************/
// Generated by LDC Full Version Version 1.4.3.2
// Generated from LDF: ATEV_AL_V2.1df
#ifndef GEN_LIN_CONFIG_H
#define GEN_LIN_CONFIG_H

#include "lin_type.h"
//#include "stm32f10x.h"

// Lin Attributes

#define LIN_BAUDRATE      19200 
// for CPU speed of 8 MIPS

// Node Attributes

// Generated Node: MasterNode

#define LIN_MASTER  

#define LIN_PROTOCOL_VERSION_2_1


// User Defined Attributes


// User Defined Diagnostic Attributes

#define		LIN_DIAG_ENABLE

#define		LIN_COOKED_API

#define		LIN_TASK_CYCLE_MS		2

#define      LIN_FRAME_TIMEOUT    5

#define      LIN_AUTOBAUD_TIMEOUT    2


// User Defined Node Attributes

#define		LIN_ENABLE_ASSIGN_FRAME_ID_RANGE


// User Defined MCU Attributes

#define      STM32F10x
#define      BRGVAL          416u
#define      BRGH_FLAG       1u
#define      BRG16_FLAG      1u
#define      LIN_UART3

#include "lin_type.h"


// Master Attributes
#define LIN_MAX_NUM 10
#define NumberOfSchedTables          7 

#define SlavesControl_Schedule        0
//extern t_lin_sched_table schedule0[3];
extern t_lin_sched_table schedule0[LIN_MAX_NUM];
#define Normal_Schedule        1
extern t_lin_sched_table schedule1[5];
#define DIAG        2
extern t_lin_sched_table schedule2[2];
#define DIAG_RESP        3
extern t_lin_sched_table schedule3[1];
#define DIAG_RQ        4
extern t_lin_sched_table schedule4[1];
extern t_lin_sched_table schedule5[1];
#define DIAG_M_L_SCHED        5
extern t_lin_sched_table schedule6[1];
#define DIAG_S_L_SCHED        6
extern l_u8 schedTblSizeList[1];
extern l_ScheduleTableList* scheduleList[1];
void Init_ScheduleTableList(void);

extern t_l_node_diag_info slv1;
extern t_l_conf_frame_info cfg_frms_slv1[3];
extern t_l_node_diag_info slv2;
extern t_l_conf_frame_info cfg_frms_slv2[3];
extern t_l_node_diag_info slv3;
extern t_l_conf_frame_info cfg_frms_slv3[3];

#define LIN_SLAVE_MAX_STMIN                       500

#define LIN_NUMBER_OF_SLAVES                       3
extern t_l_node_diag_info_list l_node_diag_info_list[3];
extern t_l_conf_frm_info_list l_conf_frm_info_list[3];

// Frame Attributes

#define LIN_NUMBER_OF_FRAMES     5 


//#define LIN_FRAME_CTRL_INIT {{{17,129,8}},{{146,129,8}},{{97,128,2}},{{226,128,2}},{{163,128,2}}}

//extern t_Lin_Frame_Ctrl const_LIN_FRAME_CTRL_INIT [LIN_NUMBER_OF_FRAMES];
extern t_Lin_Frame_Ctrl const_LIN_FRAME_CTRL_INIT [LIN_MAX_NUM];

// Notification Flag API, PID and Message ID Access for whole frames

#define l_get_msg_id_low_frame(x)            (g_lin_frame_ctrl[x].frame.msg_id.lo)
#define l_get_msg_id_high_frame(x)           (g_lin_frame_ctrl[x].frame.msg_id.hi)
#define l_get_pid_frame(x)           (g_lin_frame_ctrl[x].frame.pid)
#define l_set_pid_frame(x,y)         (g_lin_frame_ctrl[x].frame.pid = y)
#define l_flg_tst_frm_LedColorCtrl()		 (g_lin_frame_ctrl[0].frame.frame_type.update_flag == 1)
#define l_flg_clr_frm_LedColorCtrl()		 (g_lin_frame_ctrl[0].frame.frame_type.update_flag = 0)
#define LIN_FRAME_LedColorCtrl()            (g_lin_frame_ctrl[0].frame.pid)
#define LIN_CHANGE_PID_FRAME_LedColorCtrl(x)            (g_lin_frame_ctrl[0].frame.pid = x)

#define LIN_FRAME_LOW_LedColorCtrl_MSG_ID()            (g_lin_frame_ctrl[0].frame.msg_id.lo)
#define LIN_FRAME_HIGH_LedColorCtrl_MSG_ID()            (g_lin_frame_ctrl[0].frame.msg_id.hi)
#define l_flg_tst_frm_LedFlowCtrl()		 (g_lin_frame_ctrl[1].frame.frame_type.update_flag == 1)
#define l_flg_clr_frm_LedFlowCtrl()		 (g_lin_frame_ctrl[1].frame.frame_type.update_flag = 0)
#define LIN_FRAME_LedFlowCtrl()            (g_lin_frame_ctrl[1].frame.pid)
#define LIN_CHANGE_PID_FRAME_LedFlowCtrl(x)            (g_lin_frame_ctrl[1].frame.pid = x)

#define LIN_FRAME_LOW_LedFlowCtrl_MSG_ID()            (g_lin_frame_ctrl[1].frame.msg_id.lo)
#define LIN_FRAME_HIGH_LedFlowCtrl_MSG_ID()            (g_lin_frame_ctrl[1].frame.msg_id.hi)
#define l_flg_tst_frm_Slave1_Left_States()		 (g_lin_frame_ctrl[2].frame.frame_type.update_flag == 1)
#define l_flg_clr_frm_Slave1_Left_States()		 (g_lin_frame_ctrl[2].frame.frame_type.update_flag = 0)
#define LIN_FRAME_Slave1_Left_States()            (g_lin_frame_ctrl[2].frame.pid)
#define LIN_CHANGE_PID_FRAME_Slave1_Left_States(x)            (g_lin_frame_ctrl[2].frame.pid = x)

#define LIN_FRAME_LOW_Slave1_Left_States_MSG_ID()            (g_lin_frame_ctrl[2].frame.msg_id.lo)
#define LIN_FRAME_HIGH_Slave1_Left_States_MSG_ID()            (g_lin_frame_ctrl[2].frame.msg_id.hi)
#define l_flg_tst_frm_Slave2_Center_States()		 (g_lin_frame_ctrl[3].frame.frame_type.update_flag == 1)
#define l_flg_clr_frm_Slave2_Center_States()		 (g_lin_frame_ctrl[3].frame.frame_type.update_flag = 0)
#define LIN_FRAME_Slave2_Center_States()            (g_lin_frame_ctrl[3].frame.pid)
#define LIN_CHANGE_PID_FRAME_Slave2_Center_States(x)            (g_lin_frame_ctrl[3].frame.pid = x)

#define LIN_FRAME_LOW_Slave2_Center_States_MSG_ID()            (g_lin_frame_ctrl[3].frame.msg_id.lo)
#define LIN_FRAME_HIGH_Slave2_Center_States_MSG_ID()            (g_lin_frame_ctrl[3].frame.msg_id.hi)
#define l_flg_tst_frm_Slave3_Right_States()		 (g_lin_frame_ctrl[4].frame.frame_type.update_flag == 1)
#define l_flg_clr_frm_Slave3_Right_States()		 (g_lin_frame_ctrl[4].frame.frame_type.update_flag = 0)
#define LIN_FRAME_Slave3_Right_States()            (g_lin_frame_ctrl[4].frame.pid)
#define LIN_CHANGE_PID_FRAME_Slave3_Right_States(x)            (g_lin_frame_ctrl[4].frame.pid = x)

#define LIN_FRAME_LOW_Slave3_Right_States_MSG_ID()            (g_lin_frame_ctrl[4].frame.msg_id.lo)
#define LIN_FRAME_HIGH_Slave3_Right_States_MSG_ID()            (g_lin_frame_ctrl[4].frame.msg_id.hi)

// Signal Attributes


// Signal to Frame Mapping and Signal Update Flags
/*
typedef union
{
  struct
  {
    l_u16 LedColor_bgcRedVal_f	:1;
    l_u16 LedColor_bgcGreenVal_f	:1;
    l_u16 LedColor_bgcBlueVal_f	:1;
    l_u16 LedColor_flowRedVal_f	:1;
    l_u16 LedColor_flowGreenVal_f	:1;
    l_u16 LedColor_flowBlueVal_f	:1;
    l_u16 res0	:2;
  }flags;
  unsigned char reg[1];
}t_l_flags_LedColorCtrl;

extern volatile t_l_flags_LedColorCtrl l_flags_LedColorCtrl;

typedef union
{
  struct
  {
    l_u16 LeftFlowStartPos_f	:1;
    l_u16 LeftFlowStopPos_f	:1;
    l_u16 CenterFlowStartPos_f	:1;
    l_u16 CenterFlowStopPos_f	:1;
    l_u16 CenterFlowStartPos1_f	:1;
    l_u16 CenterFlowStopPos1_f	:1;
    l_u16 RightFlowStartPos_f	:1;
    l_u16 RightFlowStopPos_f	:1;
  }flags;
  unsigned char reg[1];
}t_l_flags_LedFlowCtrl;

extern volatile t_l_flags_LedFlowCtrl l_flags_LedFlowCtrl;

typedef union
{
  struct
  {
    l_u16 Slave1_HW_Error_f	:1;
    l_u16 Slave1_ThermalError_f	:1;
    l_u16 Slave1_ChannelError_f	:1;
    l_u16 Slave1_ResponseError_f	:1;
    l_u16 res0	:4;
  }flags;
  unsigned char reg[1];
}t_l_flags_Slave1_Left_States;

extern volatile t_l_flags_Slave1_Left_States l_flags_Slave1_Left_States;

typedef union
{
  struct
  {
    l_u16 Slave2_HW_Error_f	:1;
    l_u16 Slave2_ThermalError_f	:1;
    l_u16 Slave2_ChannelError_f	:1;
    l_u16 Slave2_ResponseError_f	:1;
    l_u16 res0	:4;
  }flags;
  unsigned char reg[1];
}t_l_flags_Slave2_Center_States;

extern volatile t_l_flags_Slave2_Center_States l_flags_Slave2_Center_States;

typedef union
{
  struct
  {
    l_u16 Slave3_HW_Error_f	:1;
    l_u16 Slave3_ThermalError_f	:1;
    l_u16 Slave3_ChannelError_f	:1;
    l_u16 Slave3_ResponseError_f	:1;
    l_u16 res0	:4;
  }flags;
  unsigned char reg[1];
}t_l_flags_Slave3_Right_States;

extern volatile t_l_flags_Slave3_Right_States l_flags_Slave3_Right_States;
*/
typedef union
{
  unsigned char		frame_data[8];
  unsigned char		*dataptr;
}t_l_FrmData;
 
typedef union
{
  unsigned char      dataBytes[LIN_MAX_NUM*8];
//  struct
//  {
//  t_l_FrmData		l_frm_LedColorCtrl;
//  t_l_FrmData		l_frm_LedFlowCtrl;
//  t_l_FrmData		l_frm_Slave1_Left_States;
//  t_l_FrmData		l_frm_Slave2_Center_States;
//  t_l_FrmData		l_frm_Slave3_Right_States;
//  }frames;
  t_l_FrmData		Frame[LIN_MAX_NUM];
}t_l_Lin_Data;

extern t_l_Lin_Data	l_LinData;

extern  t_l_Lin_Data const_LinData;

/*
// Signal Access Macros

// Signal Write Access for Signal LedColor_bgcRedVal
#define l_u8_wr_LedColor_bgcRedVal(x)		do{ l_LinData.frames.l_frm_LedColorCtrl.frame_data[0]&=(0); \
 l_LinData.frames.l_frm_LedColorCtrl.frame_data[0]|=((x)<<0); \
			g_lin_frame_ctrl[0].frame.frame_type.update_flag = 1; \
			}while(0);

// Signal Write Access for Signal LedColor_bgcGreenVal
#define l_u8_wr_LedColor_bgcGreenVal(x)		do{ l_LinData.frames.l_frm_LedColorCtrl.frame_data[1]&=(0); \
 l_LinData.frames.l_frm_LedColorCtrl.frame_data[1]|=((x)<<0); \
			g_lin_frame_ctrl[0].frame.frame_type.update_flag = 1; \
			}while(0);

// Signal Write Access for Signal LedColor_bgcBlueVal
#define l_u8_wr_LedColor_bgcBlueVal(x)		do{ l_LinData.frames.l_frm_LedColorCtrl.frame_data[2]&=(0); \
 l_LinData.frames.l_frm_LedColorCtrl.frame_data[2]|=((x)<<0); \
			g_lin_frame_ctrl[0].frame.frame_type.update_flag = 1; \
			}while(0);

// Signal Write Access for Signal LedColor_flowRedVal
#define l_u8_wr_LedColor_flowRedVal(x)		do{ l_LinData.frames.l_frm_LedColorCtrl.frame_data[3]&=(0); \
 l_LinData.frames.l_frm_LedColorCtrl.frame_data[3]|=((x)<<0); \
			g_lin_frame_ctrl[0].frame.frame_type.update_flag = 1; \
			}while(0);

// Signal Write Access for Signal LedColor_flowGreenVal
#define l_u8_wr_LedColor_flowGreenVal(x)		do{ l_LinData.frames.l_frm_LedColorCtrl.frame_data[4]&=(0); \
 l_LinData.frames.l_frm_LedColorCtrl.frame_data[4]|=((x)<<0); \
			g_lin_frame_ctrl[0].frame.frame_type.update_flag = 1; \
			}while(0);

// Signal Write Access for Signal LedColor_flowBlueVal
#define l_u8_wr_LedColor_flowBlueVal(x)		do{ l_LinData.frames.l_frm_LedColorCtrl.frame_data[5]&=(0); \
 l_LinData.frames.l_frm_LedColorCtrl.frame_data[5]|=((x)<<0); \
			g_lin_frame_ctrl[0].frame.frame_type.update_flag = 1; \
			}while(0);

// Signal Write Access for Signal LeftFlowStartPos
#define l_u8_wr_LeftFlowStartPos(x)		do{ l_LinData.frames.l_frm_LedFlowCtrl.frame_data[0]&=(0); \
 l_LinData.frames.l_frm_LedFlowCtrl.frame_data[0]|=((x)<<0); \
			g_lin_frame_ctrl[1].frame.frame_type.update_flag = 1; \
			}while(0);

// Signal Write Access for Signal LeftFlowStopPos
#define l_u8_wr_LeftFlowStopPos(x)		do{ l_LinData.frames.l_frm_LedFlowCtrl.frame_data[1]&=(0); \
 l_LinData.frames.l_frm_LedFlowCtrl.frame_data[1]|=((x)<<0); \
			g_lin_frame_ctrl[1].frame.frame_type.update_flag = 1; \
			}while(0);

// Signal Write Access for Signal CenterFlowStartPos
#define l_u8_wr_CenterFlowStartPos(x)		do{ l_LinData.frames.l_frm_LedFlowCtrl.frame_data[2]&=(0); \
 l_LinData.frames.l_frm_LedFlowCtrl.frame_data[2]|=((x)<<0); \
			g_lin_frame_ctrl[1].frame.frame_type.update_flag = 1; \
			}while(0);

// Signal Write Access for Signal CenterFlowStopPos
#define l_u8_wr_CenterFlowStopPos(x)		do{ l_LinData.frames.l_frm_LedFlowCtrl.frame_data[3]&=(0); \
 l_LinData.frames.l_frm_LedFlowCtrl.frame_data[3]|=((x)<<0); \
			g_lin_frame_ctrl[1].frame.frame_type.update_flag = 1; \
			}while(0);

// Signal Write Access for Signal CenterFlowStartPos1
#define l_u8_wr_CenterFlowStartPos1(x)		do{ l_LinData.frames.l_frm_LedFlowCtrl.frame_data[4]&=(0); \
 l_LinData.frames.l_frm_LedFlowCtrl.frame_data[4]|=((x)<<0); \
			g_lin_frame_ctrl[1].frame.frame_type.update_flag = 1; \
			}while(0);

// Signal Write Access for Signal CenterFlowStopPos1
#define l_u8_wr_CenterFlowStopPos1(x)		do{ l_LinData.frames.l_frm_LedFlowCtrl.frame_data[5]&=(0); \
 l_LinData.frames.l_frm_LedFlowCtrl.frame_data[5]|=((x)<<0); \
			g_lin_frame_ctrl[1].frame.frame_type.update_flag = 1; \
			}while(0);

// Signal Write Access for Signal RightFlowStartPos
#define l_u8_wr_RightFlowStartPos(x)		do{ l_LinData.frames.l_frm_LedFlowCtrl.frame_data[6]&=(0); \
 l_LinData.frames.l_frm_LedFlowCtrl.frame_data[6]|=((x)<<0); \
			g_lin_frame_ctrl[1].frame.frame_type.update_flag = 1; \
			}while(0);

// Signal Write Access for Signal RightFlowStopPos
#define l_u8_wr_RightFlowStopPos(x)		do{ l_LinData.frames.l_frm_LedFlowCtrl.frame_data[7]&=(0); \
 l_LinData.frames.l_frm_LedFlowCtrl.frame_data[7]|=((x)<<0); \
			g_lin_frame_ctrl[1].frame.frame_type.update_flag = 1; \
			}while(0);

// Signal Read Access for Signal Slave1_HW_Error
#define l_bool_rd_Slave1_HW_Error()		((l_LinData.frames.l_frm_Slave1_Left_States.frame_data[0]>>0)&1)
#define l_flg_tst_Slave1_HW_Error()		(l_flags_Slave1_Left_States.flags.Slave1_HW_Error_f == 1)
#define l_flg_clr_Slave1_HW_Error()		(l_flags_Slave1_Left_States.flags.Slave1_HW_Error_f = 0)

// Signal Read Access for Signal Slave1_ThermalError
#define l_bool_rd_Slave1_ThermalError()		((l_LinData.frames.l_frm_Slave1_Left_States.frame_data[0]>>2)&1)
#define l_flg_tst_Slave1_ThermalError()		(l_flags_Slave1_Left_States.flags.Slave1_ThermalError_f == 1)
#define l_flg_clr_Slave1_ThermalError()		(l_flags_Slave1_Left_States.flags.Slave1_ThermalError_f = 0)

// Signal Read Access for Signal Slave1_ChannelError
#define l_u8_rd_Slave1_ChannelError()		((l_LinData.frames.l_frm_Slave1_Left_States.frame_data[0]>>3)&3)
#define l_flg_tst_Slave1_ChannelError()		(l_flags_Slave1_Left_States.flags.Slave1_ChannelError_f == 1)
#define l_flg_clr_Slave1_ChannelError()		(l_flags_Slave1_Left_States.flags.Slave1_ChannelError_f = 0)

// Signal Read Access for Signal Slave1_ResponseError
#define l_bool_rd_Slave1_ResponseError()		((l_LinData.frames.l_frm_Slave1_Left_States.frame_data[1]>>0)&1)
#define l_flg_tst_Slave1_ResponseError()		(l_flags_Slave1_Left_States.flags.Slave1_ResponseError_f == 1)
#define l_flg_clr_Slave1_ResponseError()		(l_flags_Slave1_Left_States.flags.Slave1_ResponseError_f = 0)

// Signal Read Access for Signal Slave2_HW_Error
#define l_bool_rd_Slave2_HW_Error()		((l_LinData.frames.l_frm_Slave2_Center_States.frame_data[0]>>0)&1)
#define l_flg_tst_Slave2_HW_Error()		(l_flags_Slave2_Center_States.flags.Slave2_HW_Error_f == 1)
#define l_flg_clr_Slave2_HW_Error()		(l_flags_Slave2_Center_States.flags.Slave2_HW_Error_f = 0)

// Signal Read Access for Signal Slave2_ThermalError
#define l_bool_rd_Slave2_ThermalError()		((l_LinData.frames.l_frm_Slave2_Center_States.frame_data[0]>>2)&1)
#define l_flg_tst_Slave2_ThermalError()		(l_flags_Slave2_Center_States.flags.Slave2_ThermalError_f == 1)
#define l_flg_clr_Slave2_ThermalError()		(l_flags_Slave2_Center_States.flags.Slave2_ThermalError_f = 0)

// Signal Read Access for Signal Slave2_ChannelError
#define l_u8_rd_Slave2_ChannelError()		((l_LinData.frames.l_frm_Slave2_Center_States.frame_data[0]>>3)&3)
#define l_flg_tst_Slave2_ChannelError()		(l_flags_Slave2_Center_States.flags.Slave2_ChannelError_f == 1)
#define l_flg_clr_Slave2_ChannelError()		(l_flags_Slave2_Center_States.flags.Slave2_ChannelError_f = 0)

// Signal Read Access for Signal Slave2_ResponseError
#define l_bool_rd_Slave2_ResponseError()		((l_LinData.frames.l_frm_Slave2_Center_States.frame_data[1]>>0)&1)
#define l_flg_tst_Slave2_ResponseError()		(l_flags_Slave2_Center_States.flags.Slave2_ResponseError_f == 1)
#define l_flg_clr_Slave2_ResponseError()		(l_flags_Slave2_Center_States.flags.Slave2_ResponseError_f = 0)

// Signal Read Access for Signal Slave3_HW_Error
#define l_bool_rd_Slave3_HW_Error()		((l_LinData.frames.l_frm_Slave3_Right_States.frame_data[0]>>0)&1)
#define l_flg_tst_Slave3_HW_Error()		(l_flags_Slave3_Right_States.flags.Slave3_HW_Error_f == 1)
#define l_flg_clr_Slave3_HW_Error()		(l_flags_Slave3_Right_States.flags.Slave3_HW_Error_f = 0)

// Signal Read Access for Signal Slave3_ThermalError
#define l_bool_rd_Slave3_ThermalError()		((l_LinData.frames.l_frm_Slave3_Right_States.frame_data[0]>>2)&1)
#define l_flg_tst_Slave3_ThermalError()		(l_flags_Slave3_Right_States.flags.Slave3_ThermalError_f == 1)
#define l_flg_clr_Slave3_ThermalError()		(l_flags_Slave3_Right_States.flags.Slave3_ThermalError_f = 0)

// Signal Read Access for Signal Slave3_ChannelError
#define l_u8_rd_Slave3_ChannelError()		((l_LinData.frames.l_frm_Slave3_Right_States.frame_data[0]>>3)&3)
#define l_flg_tst_Slave3_ChannelError()		(l_flags_Slave3_Right_States.flags.Slave3_ChannelError_f == 1)
#define l_flg_clr_Slave3_ChannelError()		(l_flags_Slave3_Right_States.flags.Slave3_ChannelError_f = 0)

// Signal Read Access for Signal Slave3_ResponseError
#define l_bool_rd_Slave3_ResponseError()		((l_LinData.frames.l_frm_Slave3_Right_States.frame_data[1]>>0)&1)
#define l_flg_tst_Slave3_ResponseError()		(l_flags_Slave3_Right_States.flags.Slave3_ResponseError_f == 1)
#define l_flg_clr_Slave3_ResponseError()		(l_flags_Slave3_Right_States.flags.Slave3_ResponseError_f = 0)

// Lin Driver Access to Update Signal Flags for Frame LedColorCtrl 
#define l_Update_flags_frame0()		{\
		l_flags_LedColorCtrl.reg[0] = 0xFF;	 \
					}

// Lin Driver Access to Update Signal Flags for Frame LedFlowCtrl 
#define l_Update_flags_frame1()		{\
		l_flags_LedFlowCtrl.reg[0] = 0xFF;	 \
					}

// Lin Driver Access to Update Signal Flags for Frame Slave1_Left_States 
#define l_Update_flags_frame2()		{\
		l_flags_Slave1_Left_States.reg[0] = 0xFF;	 \
					}

// Lin Driver Access to Update Signal Flags for Frame Slave2_Center_States 
#define l_Update_flags_frame3()		{\
		l_flags_Slave2_Center_States.reg[0] = 0xFF;	 \
					}

// Lin Driver Access to Update Signal Flags for Frame Slave3_Right_States 
#define l_Update_flags_frame4()		{\
		l_flags_Slave3_Right_States.reg[0] = 0xFF;	 \
					}

#define l_Update_flags_frame(x)			{\
	switch(x)			{\
		case(0):l_Update_flags_frame0();\
			break;\
		case(1):l_Update_flags_frame1();\
			break;\
		case(2):l_Update_flags_frame2();\
			break;\
		case(3):l_Update_flags_frame3();\
			break;\
		case(4):l_Update_flags_frame4();\
			break;\
		default:\
			break;\
	};\
}
*/

// Prototype for Byte Array Signal Access Function  
void l_get_byte_array(unsigned char*,unsigned char,unsigned char*);
void l_set_byte_array(unsigned char*,unsigned char,const unsigned char*);

// Macros for Response Error Flag / Frame handling


#define l_Set_Response_Error_Flag()

#define l_Reset_Response_Error_Flag()

// File Footer

#endif // end #ifndef GEN_LIN_CONFIG_H

